from aiogram import types
from aiogram.fsm.context import FSMContext
from states.states import AdminPanel, AddUser, BlockUser, DeleteUser, AddCabinetGlobal
from keyboards.keyboards import admin_main_keyboard, admin_user_select_keyboard, admin_cabinet_access_keyboard, admin_clients_keyboard, admin_client_cabinets_keyboard
from database.crud import get_all_users, add_user, find_user_by_username, set_user_active, delete_user, log_admin_action, get_admin_logs, get_user_permissions, set_user_permission, get_all_cabinets, add_global_cabinet, get_user_cabinets
from utils.permissions import is_admin, admin_required

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä)
# def is_admin(user_id):
#     users = get_all_users()
#     for u in users:
#         if u[0] == user_id and u[2] == 'admin' and u[3] == 1:
#             return True
#     return False

@admin_required
async def admin_menu(event, state: FSMContext):
    # event –º–æ–∂–µ—Ç –±—ã—Ç—å Message –∏–ª–∏ CallbackQuery
    if isinstance(event, types.CallbackQuery):
        user_id = event.from_user.id
        message = event.message
        await event.answer()
    else:
        user_id = event.from_user.id
        message = event
    print("–í–∞—à user_id:", user_id)
    print("–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:", get_all_users())
    await message.answer(f"–í–∞—à user_id: {user_id}")
    # if not is_admin(user_id):
    #     await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    #     return
    await state.set_state(AdminPanel.main)
    await message.answer("üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_main_keyboard())

@admin_required
async def admin_list(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    users = get_all_users()
    text = "üë§ <b>–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤:</b>\n"
    for u in users:
        status = "‚úÖ" if u[3] else "üö´"
        role = "(–∞–¥–º–∏–Ω)" if u[2] == 'admin' else ""
        text += f"{status} @{u[1]} {role}\n"
    await callback.message.edit_text(text, reply_markup=admin_main_keyboard(), parse_mode="HTML")

@admin_required
async def admin_add(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(AddUser.username)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ username –∫–ª–∏–µ–Ω—Ç–∞ (–±–µ–∑ @):")

async def admin_add_username(msg: types.Message, state: FSMContext):
    username = msg.text.strip().lstrip('@')
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å user_id —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–∏—Å–∞–ª –±–æ—Ç—É
    user = find_user_by_username(username)
    if user:
        await msg.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ.")
        return
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ–Ω –Ω–∞–ø–∏—Å–∞–ª –±–æ—Ç—É, –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å
    await msg.answer("–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É, —á—Ç–æ–±—ã –µ–≥–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ username.")
    await state.clear()

@admin_required
async def admin_block(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(BlockUser.username)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ username –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")

async def admin_block_username(msg: types.Message, state: FSMContext):
    username = msg.text.strip().lstrip('@')
    user = find_user_by_username(username)
    if not user:
        await msg.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    user_id, username, role, is_active = user
    set_user_active(user_id, 0 if is_active else 1)
    log_admin_action(msg.from_user.id, 'block' if is_active else 'unblock', user_id, username)
    await msg.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} {'–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if is_active else '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}.")
    await state.clear()

@admin_required
async def admin_delete(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(DeleteUser.username)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ username –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

async def admin_delete_username(msg: types.Message, state: FSMContext):
    username = msg.text.strip().lstrip('@')
    user = find_user_by_username(username)
    if not user:
        await msg.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    user_id, username, role, is_active = user
    # –ó–∞—â–∏—Ç–∞: –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è, –µ—Å–ª–∏ –≤—ã –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω
    all_users = get_all_users()
    admin_count = sum(1 for u in all_users if u[2] == 'admin' and u[3] == 1)
    if role == 'admin' and admin_count <= 1:
        await msg.answer("‚ùóÔ∏è –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–¥–º–∏–Ω–∞!")
        await state.clear()
        return
    if user_id == msg.from_user.id:
        await msg.answer("‚ùóÔ∏è –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!")
        await state.clear()
        return
    delete_user(user_id)
    log_admin_action(msg.from_user.id, 'delete', user_id, username)
    await msg.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–¥–∞–ª—ë–Ω.")
    await state.clear()

@admin_required
async def admin_logs(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    logs = get_admin_logs()
    text = "<b>–õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π:</b>\n"
    for l in logs:
        admin_id, action, target_user_id, target_username, ts = l
        text += f"{ts}: admin_id={admin_id} {action} @{target_username} (id={target_user_id})\n"
    await callback.message.edit_text(text, reply_markup=admin_main_keyboard(), parse_mode="HTML")

async def admin_back(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    await callback.message.edit_text("–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")

@admin_required
async def admin_access_menu(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    users = [u for u in get_all_users() if u[2] == 'client' and u[3] == 1]
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=admin_user_select_keyboard(users))

@admin_required
async def admin_access_user(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    data = getattr(callback, 'data', None)
    user_id = int(data.split('_')[-1])
    cabinets = get_all_cabinets()  # —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞–±–∏–Ω–µ—Ç—ã
    permissions = get_user_permissions(user_id)
    await callback.message.edit_text(f"–î–æ—Å—Ç—É–ø –∫ –∫–∞–±–∏–Ω–µ—Ç–∞–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:", reply_markup=admin_cabinet_access_keyboard(user_id, cabinets, permissions))

@admin_required
async def admin_access_toggle(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    data = getattr(callback, 'data', None)
    parts = data.split('_')
    user_id = int(parts[3])
    cabinet_id = int(parts[4])
    permissions = get_user_permissions(user_id)
    new_access = not permissions.get(cabinet_id, False)
    set_user_permission(user_id, cabinet_id, new_access)
    cabinets = get_all_cabinets()
    permissions = get_user_permissions(user_id)
    await callback.message.edit_text(f"–î–æ—Å—Ç—É–ø –∫ –∫–∞–±–∏–Ω–µ—Ç–∞–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:", reply_markup=admin_cabinet_access_keyboard(user_id, cabinets, permissions))

@admin_required
async def admin_add_cabinet(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(AddCabinetGlobal.name)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞:")

async def admin_add_cabinet_finish(msg: types.Message, state: FSMContext):
    name = msg.text.strip()
    add_global_cabinet(name)
    await msg.answer(f"–ö–∞–±–∏–Ω–µ—Ç '{name}' –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=admin_main_keyboard())
    await state.clear() 