from aiogram import types, F
from aiogram.fsm.context import FSMContext
from states.states import AddCabinet, RenameCabinet, DeleteCabinet, AddTrigger, EditTrigger
from keyboards.keyboards import cabinets_keyboard, cancel_keyboard, cabinet_detail_keyboard, confirm_keyboard, cabinets_menu_keyboard, main_menu_keyboard, trigger_type_keyboard, trigger_list_keyboard, notification_interval_keyboard
from database.message_manager import send_and_cleanup, edit_and_cleanup
from database.crud import save_trigger, get_triggers_for_user, add_cabinet, get_user_cabinets, get_accessible_cabinets, get_all_users, remove_cabinet_by_index, update_cabinet_name_by_index, remove_cabinet_by_id, set_autoreply_settings, get_autoreply_settings, delete_trigger
import logging
import aiogram
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from utils.permissions import is_admin
from aiogram.fsm.state import State, StatesGroup

async def add_cabinet_step1(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞ - –∑–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è"""
    await callback.answer()
    message = getattr(callback, 'message', None)
    if not message:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)
        return
    await edit_and_cleanup(
        callback.bot,
        message.chat.id,
        message.message_id,
        "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞:\n\n–ò–ª–∏ –Ω–∞–∂–º–∏ ‚ùå –û—Ç–º–µ–Ω–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞",
        reply_markup=cancel_keyboard()
    )
    await state.set_state(AddCabinet.name)

async def add_cabinet_step2(msg: types.Message, state: FSMContext):
    """–í—Ç–æ—Ä–æ–π —à–∞–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∑–∞–ø—Ä–æ—Å client_id"""
    text = getattr(msg, 'text', None)
    if text is None:
        await send_and_cleanup(msg.bot, msg.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞.")
        return
    
    # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤
    name = text.strip()
    if not name:
        await send_and_cleanup(msg.bot, msg.chat.id, "–û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    
    await state.update_data(name=name)
    await send_and_cleanup(
        msg.bot, 
        msg.chat.id, 
        "–í–≤–µ–¥–∏ Client ID:\n\n–ò–ª–∏ –Ω–∞–∂–º–∏ ‚ùå –û—Ç–º–µ–Ω–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞", 
        reply_markup=cancel_keyboard()
    )
    await state.set_state(AddCabinet.client_id)

async def add_cabinet_step3(msg: types.Message, state: FSMContext):
    """–¢—Ä–µ—Ç–∏–π —à–∞–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ client_id –∏ –∑–∞–ø—Ä–æ—Å client_secret"""
    text = getattr(msg, 'text', None)
    if text is None:
        await send_and_cleanup(msg.bot, msg.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Client ID.")
        return
    
    # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤
    client_id = text.strip()
    if not client_id:
        await send_and_cleanup(msg.bot, msg.chat.id, "–û—à–∏–±–∫–∞: Client ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    
    await state.update_data(client_id=client_id)
    await send_and_cleanup(
        msg.bot, 
        msg.chat.id, 
        "–í–≤–µ–¥–∏ Client Secret:\n\n–ò–ª–∏ –Ω–∞–∂–º–∏ ‚ùå –û—Ç–º–µ–Ω–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞", 
        reply_markup=cancel_keyboard()
    )
    await state.set_state(AddCabinet.secret_id)

async def add_cabinet_step4(msg: types.Message, state: FSMContext):
    """–ß–µ—Ç–≤–µ—Ä—Ç—ã–π —à–∞–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ client_secret –∏ –∑–∞–ø—Ä–æ—Å advertiser_id"""
    text = getattr(msg, 'text', None)
    if text is None:
        await send_and_cleanup(msg.bot, msg.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Client Secret.")
        return
    
    # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤
    client_secret = text.strip()
    if not client_secret:
        await send_and_cleanup(msg.bot, msg.chat.id, "–û—à–∏–±–∫–∞: Client Secret –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    
    await state.update_data(secret_id=client_secret)
    await send_and_cleanup(
        msg.bot, 
        msg.chat.id, 
        "–í–≤–µ–¥–∏ Advertiser ID:\n\n–ò–ª–∏ –Ω–∞–∂–º–∏ ‚ùå –û—Ç–º–µ–Ω–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞", 
        reply_markup=cancel_keyboard()
    )
    await state.set_state(AddCabinet.advertiser_id)

async def add_cabinet_finish(msg: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞"""
    data = await state.get_data()
    user_id = getattr(getattr(msg, 'from_user', None), 'id', None)
    text = getattr(msg, 'text', None)
    if user_id is None or text is None:
        await send_and_cleanup(msg.bot, msg.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ Advertiser ID.")
        return
    advertiser_id = text.strip()
    if not advertiser_id:
        await send_and_cleanup(msg.bot, msg.chat.id, "–û—à–∏–±–∫–∞: Advertiser ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    try:
        int(advertiser_id)
    except ValueError:
        await send_and_cleanup(msg.bot, msg.chat.id, "–û—à–∏–±–∫–∞: Advertiser ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    await add_cabinet(user_id, data["name"], data["client_id"], data["secret_id"], advertiser_id)
    await state.clear()
    cabs = await get_accessible_cabinets(user_id)
    await send_and_cleanup(
        msg.bot,
        msg.chat.id,
        f"‚úÖ –ö–∞–±–∏–Ω–µ—Ç '{data['name']}' –¥–æ–±–∞–≤–ª–µ–Ω!",
        reply_markup=await cabinets_keyboard(user_id, active_idx=len(cabs)-1)
    )

async def select_cabinet(callback: types.CallbackQuery):
    await callback.answer()
    logging.info("select_cabinet called")
    data = getattr(callback, 'data', None)
    user_id = getattr(getattr(callback, 'from_user', None), 'id', None)
    logging.info(f"select_cabinet: data={data}, user_id={user_id}")
    if data is None or user_id is None or "_" not in data:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç.", show_alert=True)
        logging.error("select_cabinet: invalid data or user_id")
        return
    try:
        cab_id = int(data.split("_")[1])
        logging.info(f"select_cabinet: cab_id={cab_id}")
    except (IndexError, ValueError) as e:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        logging.error(f"select_cabinet: exception in cab_id parsing: {e}")
        return
    try:
        if is_admin(user_id):
            cabs = await get_user_cabinets(user_id)
        else:
            cabs = await get_accessible_cabinets(user_id)
        logging.info(f"select_cabinet: cabs count={len(cabs)}")
        cab = next((c for c in cabs if c.id == cab_id), None)
        if not cab:
            await callback.answer("–û—à–∏–±–∫–∞: –∫–∞–±–∏–Ω–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            logging.error(f"select_cabinet: cab_id {cab_id} not found")
            return
        text = (f"üîπ {cab.name}\n"
                f"Client ID: {cab.client_id}\n"
                f"Client Secret: {cab.client_secret}\n"
                f"Advertiser ID: {cab.advertiser_id}")
        message = getattr(callback, 'message', None)
        if not message:
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)
            logging.error("select_cabinet: message is None")
            return
        logging.info(f"select_cabinet: sending edit_and_cleanup for chat_id={message.chat.id}, message_id={message.message_id}")
        await edit_and_cleanup(
            callback.bot,
            message.chat.id,
            message.message_id,
            text,
            reply_markup=cabinet_detail_keyboard(cab_id)
        )
        logging.info("select_cabinet: edit_and_cleanup sent successfully")
    except Exception as e:
        logging.error(f"select_cabinet: unexpected exception: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–∞.", show_alert=True)

async def delete_cabinet_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞"""
    await callback.answer()
    data = getattr(callback, 'data', None)
    user_id = getattr(getattr(callback, 'from_user', None), 'id', None)
    if data is None or user_id is None or "_" not in data:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç.", show_alert=True)
        return
    try:
        cab_id = int(data.split("_")[1])
    except (IndexError, ValueError):
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return
    cabs = await get_accessible_cabinets(user_id)
    cab = next((c for c in cabs if c.id == cab_id), None)
    if not cab:
        await callback.answer("–û—à–∏–±–∫–∞: –∫–∞–±–∏–Ω–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    await state.update_data(cabinet_id=cab_id)
    message = getattr(callback, 'message', None)
    if not message:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)
        return
    await edit_and_cleanup(
        callback.bot,
        message.chat.id,
        message.message_id,
        f"üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç '{cab.name}'?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=confirm_keyboard("delete", str(cab_id))
    )

async def delete_cabinet_confirm(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞"""
    await callback.answer()
    data = getattr(callback, 'data', None)
    user_id = getattr(getattr(callback, 'from_user', None), 'id', None)
    if data is None or user_id is None or "_" not in data:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)
        return
    try:
        cab_id = int(data.split("_")[-1])
    except (IndexError, ValueError):
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return
    cabs = await get_accessible_cabinets(user_id)
    cab = next((c for c in cabs if c.id == cab_id), None)
    if not cab:
        await callback.answer("–û—à–∏–±–∫–∞: –∫–∞–±–∏–Ω–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    cab_name = cab.name
    # –£–¥–∞–ª—è–µ–º –∫–∞–±–∏–Ω–µ—Ç –ø–æ id
    remove_cabinet_by_id(cab_id)
    message = getattr(callback, 'message', None)
    if not message:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)
        return
    await edit_and_cleanup(
        callback.bot,
        message.chat.id,
        message.message_id,
        f"üóë –ö–∞–±–∏–Ω–µ—Ç '{cab_name}' —É–¥–∞–ª–µ–Ω.",
        reply_markup=await cabinets_keyboard(user_id)
    )

async def rename_cabinet_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞"""
    await callback.answer()
    data = getattr(callback, 'data', None)
    user_id = getattr(getattr(callback, 'from_user', None), 'id', None)
    if data is None or user_id is None or "_" not in data:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç.", show_alert=True)
        return
    try:
        cab_id = int(data.split("_")[1])
    except (IndexError, ValueError):
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return
    cabs = await get_accessible_cabinets(user_id)
    cab = next((c for c in cabs if c.id == cab_id), None)
    if not cab:
        await callback.answer("–û—à–∏–±–∫–∞: –∫–∞–±–∏–Ω–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    await state.update_data(cabinet_id=cab_id)
    message = getattr(callback, 'message', None)
    if not message:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)
        return
    await edit_and_cleanup(
        callback.bot,
        message.chat.id,
        message.message_id,
        f"–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ '{cab.name}':\n\n–ò–ª–∏ –Ω–∞–∂–º–∏ ‚ùå –û—Ç–º–µ–Ω–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞",
        reply_markup=cancel_keyboard()
    )
    await state.set_state(RenameCabinet.new_name)

async def rename_cabinet_finish(msg: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞"""
    user_id = getattr(getattr(msg, 'from_user', None), 'id', None)
    text = getattr(msg, 'text', None)
    if user_id is None or text is None:
        await send_and_cleanup(msg.bot, msg.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏–º—è.")
        await state.clear()
        return
    new_name = text.strip()
    if not new_name:
        await send_and_cleanup(msg.bot, msg.chat.id, "–û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    data = await state.get_data()
    cabinet_id = data.get('cabinet_id')
    cabs = await get_accessible_cabinets(user_id)
    cab = next((c for c in cabs if c.id == cabinet_id), None)
    if not cab:
        await send_and_cleanup(msg.bot, msg.chat.id, "–û—à–∏–±–∫–∞: –∫–∞–±–∏–Ω–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    old_name = cab.name
    # ok = update_cabinet_name_by_index(user_id, cabinet_index, new_name)
    await send_and_cleanup(
        msg.bot,
        msg.chat.id,
        f"‚úèÔ∏è –ö–∞–±–∏–Ω–µ—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: '{old_name}' ‚Üí '{new_name}'",
        reply_markup=await cabinets_keyboard(user_id, active_idx=cabinet_id)
    )
    await state.clear()

async def cancel_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    await callback.answer()
    user_id = getattr(getattr(callback, 'from_user', None), 'id', None)
    if user_id is None:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)
        return
    
    message = getattr(callback, 'message', None)
    if not message:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)
        return
    
    await state.clear()
    await edit_and_cleanup(
        callback.bot,
        message.chat.id,
        message.message_id,
        "üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞–º–∏\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=await cabinets_keyboard(user_id)
    )

async def show_cabinets_menu(callback: types.CallbackQuery):
    await callback.answer()
    user_id = callback.from_user.id
    message = getattr(callback, 'message', None)
    if message and hasattr(message, 'edit_text'):
        try:
            await message.edit_text("üè¢ –í–∞—à–∏ –∫–∞–±–∏–Ω–µ—Ç—ã:", reply_markup=await cabinets_keyboard(user_id))
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                pass
            else:
                raise
    else:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)

async def back_to_main(callback: types.CallbackQuery):
    await callback.answer()
    message = getattr(callback, 'message', None)
    if message and hasattr(message, 'edit_text'):
        try:
            await message.edit_text("üëã –ü—Ä–∏–≤–µ—Ç! –£–ø—Ä–∞–≤–ª—è–π –∫–∞–±–∏–Ω–µ—Ç–∞–º–∏ –ê–≤–∏—Ç–æ:", reply_markup=main_menu_keyboard())
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                pass
            else:
                try:
                    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –£–ø—Ä–∞–≤–ª—è–π –∫–∞–±–∏–Ω–µ—Ç–∞–º–∏ –ê–≤–∏—Ç–æ:", reply_markup=main_menu_keyboard())
                except Exception:
                    pass
        except Exception:
            try:
                await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –£–ø—Ä–∞–≤–ª—è–π –∫–∞–±–∏–Ω–µ—Ç–∞–º–∏ –ê–≤–∏—Ç–æ:", reply_markup=main_menu_keyboard())
            except Exception:
                pass
    else:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)

async def add_cabinet_start(callback: types.CallbackQuery, state):
    await callback.answer()
    message = getattr(callback, 'message', None)
    if message and hasattr(message, 'edit_text'):
        try:
            await message.edit_text("–í–≤–µ–¥–∏—Ç–µ client_id:")
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                pass
            else:
                raise
    else:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)

# 1. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä'
async def add_trigger_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    data = getattr(callback, 'data', None)
    user_id = getattr(getattr(callback, 'from_user', None), 'id', None)
    if data is None or user_id is None or "_" not in data:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç.", show_alert=True)
        return
    try:
        cab_id = int(data.split("_")[-1])
    except (IndexError, ValueError):
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return
    await state.update_data(cabinet_id=cab_id)
    await state.set_state(AddTrigger.type)
    message = getattr(callback, 'message', None)
    if message and hasattr(message, 'edit_text'):
        try:
            await message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±—é–¥–∂–µ—Ç–∞ –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞:",
                reply_markup=trigger_type_keyboard(cab_id)
            )
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                pass
            else:
                raise
    else:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)

# 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±—é–¥–∂–µ—Ç–∞
async def add_trigger_type(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    data = getattr(callback, 'data', None)
    user_id = getattr(getattr(callback, 'from_user', None), 'id', None)
    if data is None or user_id is None:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø.", show_alert=True)
        return
    try:
        parts = data.split("_")
        trigger_type = parts[2]  # real/cpa/total
        cab_id = int(parts[3])
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return
    await state.update_data(trigger_type=trigger_type)
    await state.set_state(AddTrigger.threshold)
    message = getattr(callback, 'message', None)
    if message and hasattr(message, 'edit_text'):
        try:
            await message.edit_text(
                f"–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ç–∏–ø–∞ '{'–û—Å–Ω–æ–≤–Ω–æ–π' if trigger_type=='real' else ('CPA' if trigger_type=='cpa' else '–û–±—â–∏–π')}' (–≤ —Ä—É–±–ª—è—Ö):"
            )
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                pass
            else:
                raise
    else:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)

# 3. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ—Ä–æ–≥–∞
async def add_trigger_threshold(msg: types.Message, state: FSMContext):
    user_id = getattr(getattr(msg, 'from_user', None), 'id', None)
    text = getattr(msg, 'text', None)
    if user_id is None or text is None:
        await send_and_cleanup(msg.bot, msg.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–æ—Ä–æ–≥.")
        await state.clear()
        return
    try:
        threshold = float(text.replace(",", "."))
        if threshold <= 0:
            raise ValueError
    except Exception:
        await send_and_cleanup(msg.bot, msg.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    data = await state.get_data()
    cabinet_id = data.get('cabinet_id')
    trigger_type = data.get('trigger_type')
    if cabinet_id is None or trigger_type is None:
        await send_and_cleanup(msg.bot, msg.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ —Ç–∏–ø.")
        await state.clear()
        return
    save_trigger(user_id, cabinet_id, trigger_type, threshold)
    # –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –¥–µ—Ç–∞–ª—è–º –∫–∞–±–∏–Ω–µ—Ç–∞
    cabs = await get_accessible_cabinets(user_id)
    cab = next((c for c in cabs if c.id == cabinet_id), None)
    if not cab:
        await send_and_cleanup(msg.bot, msg.chat.id, "–û—à–∏–±–∫–∞: –∫–∞–±–∏–Ω–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    text = (f"üîπ {cab.name}\n"
            f"Client ID: {cab.client_id}\n"
            f"Client Secret: {cab.client_secret}\n"
            f"Advertiser ID: {cab.advertiser_id}")
    await send_and_cleanup(
        msg.bot,
        msg.chat.id,
        f"‚úÖ –¢—Ä–∏–≥–≥–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n–¢–∏–ø: {'–û—Å–Ω–æ–≤–Ω–æ–π' if trigger_type=='real' else ('CPA' if trigger_type=='cpa' else '–û–±—â–∏–π')}\n–ü–æ—Ä–æ–≥: {threshold:.2f} ‚ÇΩ\n\n" + text,
        reply_markup=cabinet_detail_keyboard(cabinet_id)
    )
    await state.clear()

async def show_triggers(callback: types.CallbackQuery):
    await callback.answer()
    logging.info("show_triggers called")
    data = getattr(callback, 'data', None)
    user_id = getattr(getattr(callback, 'from_user', None), 'id', None)
    logging.info(f"show_triggers: data={data}, user_id={user_id}")
    if data is None or user_id is None or "_" not in data:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç.", show_alert=True)
        logging.error("show_triggers: invalid data or user_id")
        return
    try:
        cab_id = int(data.split("_")[-1])
        logging.info(f"show_triggers: cab_id={cab_id}")
    except (IndexError, ValueError) as e:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        logging.error(f"show_triggers: exception in cab_id parsing: {e}")
        return
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
    all_triggers = get_triggers_for_user(user_id)
    logging.info(f"show_triggers: all triggers for user: {all_triggers}")
    triggers = [t for t in all_triggers if t['cabinet_id'] == cab_id]
    logging.info(f"show_triggers: found {len(triggers)} triggers for cabinet {cab_id}: {triggers}")
    if not triggers:
        text = "üîî –£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞."
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä", callback_data=f"add_trigger_{cab_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"cabinet_{cab_id}")]
        ])
    else:
        text = "üîî –í–∞—à–∏ —Ç—Ä–∏–≥–≥–µ—Ä—ã:\n"
        for t in triggers:
            tname = {'real': '–û—Å–Ω–æ–≤–Ω–æ–π', 'cpa': 'CPA', 'total': '–û–±—â–∏–π'}.get(t['trigger_type'], t['trigger_type'])
            text += f"‚Ä¢ {tname}: {t['threshold']:.2f} ‚ÇΩ\n"
        kb = trigger_list_keyboard(cab_id, triggers)
    logging.info(f"show_triggers: generated text: {text}")
    message = getattr(callback, 'message', None)
    if message is not None and hasattr(message, 'edit_text'):
        try:
            logging.info(f"show_triggers: sending edit_text for chat_id={message.chat.id}, message_id={message.message_id}")
            await message.edit_text(text, reply_markup=kb)
            logging.info("show_triggers: edit_text sent successfully")
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                logging.info("show_triggers: message is not modified, ignoring")
                pass
            else:
                logging.error(f"show_triggers: TelegramBadRequest: {e}")
                raise
        except Exception as e:
            logging.error(f"show_triggers: unexpected exception: {e}", exc_info=True)
            raise
    else:
        logging.error("show_triggers: message is None or doesn't have edit_text")
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä"
async def edit_trigger_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    data = getattr(callback, 'data', None)
    user_id = getattr(getattr(callback, 'from_user', None), 'id', None)
    if not data or user_id is None:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä.", show_alert=True)
        return
    try:
        parts = data.split('_')
        cab_id = int(parts[2])
        trigger_type = parts[3]
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return
    await state.update_data(cabinet_id=cab_id, trigger_type=trigger_type)
    await state.set_state(EditTrigger.value)
    if callback.message is not None and hasattr(callback.message, 'edit_text'):
        await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ '{'–û—Å–Ω–æ–≤–Ω–æ–π' if trigger_type=='real' else ('CPA' if trigger_type=='cpa' else '–û–±—â–∏–π')}' (–≤ —Ä—É–±–ª—è—Ö):\n\n‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel", reply_markup=cancel_keyboard())

# FSM: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
async def edit_trigger_value(msg: types.Message, state: FSMContext):
    user_id = getattr(getattr(msg, 'from_user', None), 'id', None)
    text = getattr(msg, 'text', None)
    if user_id is None or text is None:
        await send_and_cleanup(msg.bot, msg.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        await state.clear()
        return
    try:
        value = float(text.replace(",", "."))
        if value <= 0:
            raise ValueError
    except Exception:
        await send_and_cleanup(msg.bot, msg.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    data = await state.get_data()
    cabinet_id = data.get('cabinet_id')
    trigger_type = data.get('trigger_type')
    if cabinet_id is None or trigger_type is None:
        await send_and_cleanup(msg.bot, msg.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä.")
        await state.clear()
        return
    save_trigger(user_id, cabinet_id, trigger_type, value)
    await state.clear()
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    triggers = [t for t in get_triggers_for_user(user_id) if t['cabinet_id'] == cabinet_id]
    if not triggers:
        text = "üîî –£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞."
        kb = cabinet_detail_keyboard(cabinet_id)
    else:
        text = "üîî –í–∞—à–∏ —Ç—Ä–∏–≥–≥–µ—Ä—ã:\n"
        for t in triggers:
            tname = {'real': '–û—Å–Ω–æ–≤–Ω–æ–π', 'cpa': 'CPA', 'total': '–û–±—â–∏–π'}.get(t['trigger_type'], t['trigger_type'])
            text += f"‚Ä¢ {tname}: {t['threshold']:.2f} ‚ÇΩ\n"
        kb = trigger_list_keyboard(cabinet_id, triggers)
    await send_and_cleanup(msg.bot, msg.chat.id, text, reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
async def show_interval_menu(callback: types.CallbackQuery):
    await callback.answer()
    data = getattr(callback, 'data', None)
    user_id = getattr(getattr(callback, 'from_user', None), 'id', None)
    if not data or user_id is None:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä.", show_alert=True)
        return
    try:
        parts = data.split('_')
        cab_id = int(parts[3])
        trigger_type = parts[4]
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return
    triggers = [t for t in get_triggers_for_user(user_id) if t['cabinet_id'] == cab_id and t['trigger_type'] == trigger_type]
    if not triggers:
        await callback.answer("–¢—Ä–∏–≥–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    current_value = triggers[0].get('repeat_interval_minutes', 0)
    if callback.message is not None and hasattr(callback.message, 'edit_text'):
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ '{'–û—Å–Ω–æ–≤–Ω–æ–π' if trigger_type=='real' else ('CPA' if trigger_type=='cpa' else '–û–±—â–∏–π')}'",
            reply_markup=notification_interval_keyboard(trigger_type, cab_id, current_value)
        )

async def set_interval(callback: types.CallbackQuery):
    await callback.answer()
    data = callback.data
    parts = data.split('_')
    cab_id = int(parts[2])
    trigger_type = parts[3]
    val = int(parts[4])
    triggers = [t for t in get_triggers_for_user(callback.from_user.id) if t['cabinet_id'] == cab_id and t['trigger_type'] == trigger_type]
    if not triggers:
        await callback.answer("–¢—Ä–∏–≥–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    threshold = triggers[0]['threshold']
    save_trigger(callback.from_user.id, cab_id, trigger_type, threshold, repeat_interval_minutes=val)
    await callback.message.edit_text(
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {'–ù–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ' if val == 0 else f'{val // 60} —á.'}",
        reply_markup=trigger_list_keyboard(cab_id, get_triggers_for_user(callback.from_user.id))
    )

def is_admin(user_id):
    users = get_all_users()
    for u in users:
        if u[0] == user_id and u[2] == 'admin' and u[3] == 1:
            return True
    return False

class AutoReplyState(StatesGroup):
    text = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–º
def autoreply_keyboard(cab_id, enabled):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –≤–∫–ª—é—á—ë–Ω" if enabled else "‚ùå –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω",
            callback_data=f"toggle_autoreply_{cab_id}"
        )],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞", callback_data=f"edit_autoreply_text_{cab_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"cabinet_{cab_id}")]
    ])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–º
async def show_autoreply_settings(callback: types.CallbackQuery):
    await callback.answer()
    data = callback.data
    cab_id = int(data.split('_')[-1])
    settings = get_autoreply_settings(cab_id)
    await callback.message.edit_text(
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞:\n\n–°—Ç–∞—Ç—É—Å: {'–í–∫–ª—é—á—ë–Ω' if settings['enabled'] else '–í—ã–∫–ª—é—á–µ–Ω'}\n–¢–µ–∫—Å—Ç: {settings['text'] or '‚Äî'}",
        reply_markup=autoreply_keyboard(cab_id, settings['enabled'])
    )

# –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç
async def toggle_autoreply(callback: types.CallbackQuery):
    await callback.answer()
    data = callback.data
    cab_id = int(data.split('_')[-1])
    settings = get_autoreply_settings(cab_id)
    set_autoreply_settings(cab_id, not settings['enabled'], settings['text'])
    await show_autoreply_settings(callback)

# –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞
async def edit_autoreply_text(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    cab_id = int(callback.data.split('_')[-1])
    await state.update_data(cab_id=cab_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞:")
    await state.set_state(AutoReplyState.text)

async def save_autoreply_text(msg: types.Message, state: FSMContext):
    text = msg.text.strip()
    data = await state.get_data()
    cab_id = data.get('cab_id')
    settings = get_autoreply_settings(cab_id)
    set_autoreply_settings(cab_id, settings['enabled'], text)
    await msg.answer(f"–¢–µ–∫—Å—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=autoreply_keyboard(cab_id, settings['enabled']))
    await state.clear()

async def delete_trigger_callback(callback: types.CallbackQuery):
    await callback.answer()
    data = callback.data
    user_id = getattr(getattr(callback, 'from_user', None), 'id', None)
    if not data or user_id is None:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä.", show_alert=True)
        return
    try:
        parts = data.split('_')
        cab_id = int(parts[2])
        trigger_type = parts[3]
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return
    delete_trigger(user_id, cab_id, trigger_type)
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    all_triggers = get_triggers_for_user(user_id)
    triggers = [t for t in all_triggers if t['cabinet_id'] == cab_id]
    if not triggers:
        text = "üîî –£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞."
        kb = cabinet_detail_keyboard(cab_id)
    else:
        text = "üîî –í–∞—à–∏ —Ç—Ä–∏–≥–≥–µ—Ä—ã:\n"
        for t in triggers:
            tname = {'real': '–û—Å–Ω–æ–≤–Ω–æ–π', 'cpa': 'CPA', 'total': '–û–±—â–∏–π'}.get(t['trigger_type'], t['trigger_type'])
            text += f"‚Ä¢ {tname}: {t['threshold']:.2f} ‚ÇΩ\n"
        kb = trigger_list_keyboard(cab_id, triggers)
    await callback.message.edit_text(text, reply_markup=kb) 