import asyncio
from aiogram import types
from keyboards.keyboards import cabinets_keyboard, cabinet_detail_keyboard, statistics_menu_keyboard
from services.avito_api import avito_api
from database.crud import get_user_cabinets
from database.message_manager import edit_and_cleanup

async def show_statistics(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–ª–∞–Ω—Å–∞ –≤—Å–µ—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤"""
    user_id = getattr(getattr(callback, 'from_user', None), 'id', None)
    if user_id is None:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)
        return
    
    message = getattr(callback, 'message', None)
    if not message:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    await edit_and_cleanup(
        callback.bot,
        message.chat.id,
        message.message_id,
        "üìä –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É..."
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–±–∏–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cabinets = await get_user_cabinets(user_id)
    
    if not cabinets:
        await edit_and_cleanup(
            callback.bot,
            message.chat.id,
            message.message_id,
            "üìä –£ –≤–∞—Å –Ω–µ—Ç –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
            reply_markup=cabinets_keyboard(user_id)
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤
    balance_data = await avito_api.get_all_cabinets_balance(cabinets)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–±–µ–∑ Markdown)
    stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫–∞–±–∏–Ω–µ—Ç–æ–≤:\n\n"
    total_real_balance = 0
    total_bonus_balance = 0
    total_cpa_balance = 0
    successful_requests = 0
    
    for cab_data in balance_data:
        name = cab_data["name"]
        balance = cab_data["balance"]
        status = cab_data["status"]
        balance_info = cab_data["balance_info"]
        
        if balance is not None:
            total_real_balance += balance.get("real", 0)
            total_bonus_balance += balance.get("bonus", 0)
            if balance.get("cpa") is not None:
                total_cpa_balance += balance["cpa"]
            successful_requests += 1
            stats_text += f"{status} {name}\n{balance_info}\n\n"
        else:
            stats_text += f"{status} {name}: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è\n\n"
    
    if successful_requests > 0:
        stats_text += "üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å:\n"
        stats_text += f"‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π: {total_real_balance:,.2f} ‚ÇΩ\n"
        if total_bonus_balance > 0:
            stats_text += f"‚Ä¢ –ë–æ–Ω—É—Å–Ω—ã–π: {total_bonus_balance:,.2f} ‚ÇΩ\n"
        if total_cpa_balance > 0:
            stats_text += f"‚Ä¢ CPA: {total_cpa_balance:,.2f} ‚ÇΩ\n"
        total_all = total_real_balance + total_bonus_balance + total_cpa_balance
        stats_text += f"‚Ä¢ –ò—Ç–æ–≥–æ: {total_all:,.2f} ‚ÇΩ\n\n"
        stats_text += f"üìà –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ: {successful_requests}/{len(cabinets)}"
    
    from datetime import datetime
    current_time = datetime.now().strftime("%H:%M:%S")
    stats_text += f"\n\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}"
    
    await edit_and_cleanup(
        callback.bot,
        message.chat.id,
        message.message_id,
        stats_text, 
        reply_markup=cabinets_keyboard(user_id)
    )

def get_cab_name(cab):
    if hasattr(cab, 'name'):
        return cab.name
    elif isinstance(cab, dict):
        return cab.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    return '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'

async def show_cabinet_balance(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
    data = getattr(callback, 'data', None)
    user_id = getattr(getattr(callback, 'from_user', None), 'id', None)
    if data is None or user_id is None or "_" not in data:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç.", show_alert=True)
        return
    
    try:
        cab_id = int(data.split("_")[1])
    except (IndexError, ValueError):
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return
    
    cabs = await get_user_cabinets(user_id)
    cab = next((c for c in cabs if getattr(c, 'id', None) == cab_id or (isinstance(c, dict) and c.get('id') == cab_id)), None)
    if not cab:
        await callback.answer("–û—à–∏–±–∫–∞: –∫–∞–±–∏–Ω–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    
    message = getattr(callback, 'message', None)
    if not message:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)
        return
    
    cab_name = get_cab_name(cab)
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    await edit_and_cleanup(
        callback.bot,
        message.chat.id,
        message.message_id,
        f"üìä –ó–∞–≥—Ä—É–∂–∞—é –±–∞–ª–∞–Ω—Å –∫–∞–±–∏–Ω–µ—Ç–∞ '{cab_name}'..."
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∫–∞–±–∏–Ω–µ—Ç–∞
    balance_data = await avito_api.get_cabinet_balance(cab)
    
    if balance_data["balance"] is not None:
        balance = balance_data["balance"]
        balance_info = balance_data["balance_info"]
        text = f"üí∞ –ë–∞–ª–∞–Ω—Å –∫–∞–±–∏–Ω–µ—Ç–∞ '{cab_name}'\n\n{balance_info}"
        from datetime import datetime
        current_time = datetime.now().strftime("%H:%M:%S")
        text += f"\n\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}"
        await edit_and_cleanup(
            callback.bot,
            message.chat.id,
            message.message_id,
            text,
            reply_markup=cabinet_detail_keyboard(cab_id)
        )
    else:
        await edit_and_cleanup(
            callback.bot,
            message.chat.id,
            message.message_id,
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∫–∞–±–∏–Ω–µ—Ç–∞ '{cab_name}':\n{balance_data['error']}",
            reply_markup=cabinet_detail_keyboard(cab_id)
        )

async def show_statistics_menu(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cabinets = await get_user_cabinets(user_id)
    # –ü–æ–ª—É—á–∏—Ç—å –∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –∫–∞–±–∏–Ω–µ—Ç–∞–º
    stats_text = await avito_api.get_aggregated_stats(cabinets)
    message = getattr(callback, 'message', None)
    if message:
        await message.edit_text(stats_text, reply_markup=statistics_menu_keyboard())
    else:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True) 