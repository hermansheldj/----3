from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import Optional
from database.crud import get_user_cabinets, get_accessible_cabinets, get_all_users
import asyncio
from utils.permissions import is_admin

async def cabinets_keyboard(user_id: int, active_idx: Optional[int] = None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–±–∏–Ω–µ—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∏–∑ –±–∞–∑—ã)"""
    if is_admin(user_id):
        cabs = await get_user_cabinets(user_id)
    else:
        cabs = await get_accessible_cabinets(user_id)
    kb = []
    for idx, cab in enumerate(cabs):
        name = getattr(cab, 'name', None) or getattr(cab, 'name', None) or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
        text = f"{name}"
        if idx == (active_idx if active_idx is not None else -1):
            text = "‚ñ∂Ô∏è " + text
        kb.append([InlineKeyboardButton(
            text=text,
            callback_data=f"select_{cab.id}"
        )])
    kb.append([
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add"),
    ])
    kb.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"),
    ])
    return InlineKeyboardMarkup(inline_keyboard=kb)

def cabinet_detail_keyboard(cab_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"rename_{cab_id}"),
         InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{cab_id}")],
        [InlineKeyboardButton(text="üìä –ë–∞–ª–∞–Ω—Å", callback_data=f"balance_{cab_id}")],
        [InlineKeyboardButton(text="üîî –¢—Ä–∏–≥–≥–µ—Ä—ã", callback_data=f"show_triggers_{cab_id}")],
        [InlineKeyboardButton(text="ü§ñ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç", callback_data=f"autoreply_{cab_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="cabinets")]
    ])

def cancel_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])

def confirm_keyboard(action: str, item_id: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_{action}_{item_id}"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel")
        ]
    ])

def main_menu_keyboard(is_admin=False):
    kb = [
        [InlineKeyboardButton(text="üè¢ –ö–∞–±–∏–Ω–µ—Ç—ã", callback_data="cabinets_menu")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics_menu")],
    ]
    if is_admin:
        kb.append([InlineKeyboardButton(text="üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_menu")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

def cabinets_menu_keyboard(user_id, cabinets):
    kb = []
    for idx, cab in enumerate(cabinets):
        kb.append([InlineKeyboardButton(text=cab['name'], callback_data=f"cabinet_{idx}")])
    kb.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_cabinet")])
    kb.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

def statistics_menu_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

def trigger_type_keyboard(cabinet_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Å–Ω–æ–≤–Ω–æ–π", callback_data=f"trigger_type_real_{cabinet_id}")],
        [InlineKeyboardButton(text="CPA", callback_data=f"trigger_type_cpa_{cabinet_id}")],
        [InlineKeyboardButton(text="–û–±—â–∏–π", callback_data=f"trigger_type_total_{cabinet_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])

def trigger_list_keyboard(cab_id, triggers):
    kb = []
    for t in triggers:
        tname = {'real': '–û—Å–Ω–æ–≤–Ω–æ–π', 'cpa': 'CPA', 'total': '–û–±—â–∏–π'}.get(t['trigger_type'], t['trigger_type'])
        kb.append([
            InlineKeyboardButton(text=f"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å {tname}", callback_data=f"edit_trigger_{cab_id}_{t['trigger_type']}"),
            InlineKeyboardButton(text="‚öôÔ∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data=f"set_interval_menu_{cab_id}_{t['trigger_type']}"),
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_trigger_{cab_id}_{t['trigger_type']}")
        ])
    kb.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"cabinet_{cab_id}")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

def notification_interval_keyboard(trigger_type, cab_id, current_value=0):
    intervals = [
        (0, "üîÅ –ù–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ"),
        (60, "‚è∞ –ß–µ—Ä–µ–∑ 1 —á–∞—Å"),
        (180, "‚è∞ –ß–µ—Ä–µ–∑ 3 —á–∞—Å–∞"),
        (360, "‚è∞ –†–∞–∑ –≤ 6 —á–∞—Å–æ–≤"),
        (720, "‚è∞ –†–∞–∑ –≤ 12 —á–∞—Å–æ–≤"),
    ]
    buttons = [
        [InlineKeyboardButton(
            text=f"{label}{' ‚úÖ' if minutes == current_value else ''}",
            callback_data=f"set_interval_{cab_id}_{trigger_type}_{minutes}"
        )] for minutes, label in intervals
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def admin_main_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data="admin_list")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data="admin_add")],
        [InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data="admin_block")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data="admin_delete")],
        [InlineKeyboardButton(text="üõ°Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º", callback_data="admin_access")],
        [InlineKeyboardButton(text="üìú –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π", callback_data="admin_logs")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")],
    ])

def admin_user_select_keyboard(users):
    kb = []
    for u in users:
        kb.append([InlineKeyboardButton(text=f"@{u[1]}", callback_data=f"admin_access_user_{u[0]}")])
    kb.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

def admin_cabinet_access_keyboard(user_id, cabinets, permissions):
    kb = []
    if not cabinets:
        kb.append([InlineKeyboardButton(text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤", callback_data="none")])
    else:
        for cab in cabinets:
            checked = '‚úÖ' if permissions.get(cab['id'], False) else '‚ùå'
            kb.append([
                InlineKeyboardButton(
                    text=f"{checked} {cab['name']}",
                    callback_data=f"admin_access_toggle_{user_id}_{cab['id']}"
                )
            ])
    kb.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

def request_access_keyboard(user_id: int, username: str):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üîê –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø",
            callback_data=f"request_access_{user_id}"
        )]
    ])

def admin_clients_keyboard(clients):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º"""
    kb = [
        [InlineKeyboardButton(text=f"@{c[1]}", callback_data=f"admin_manage_client_{c[0]}")]
        for c in clients
    ]
    kb.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

def admin_client_cabinets_keyboard(client_id, cabinets, permissions):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º –∫–ª–∏–µ–Ω—Ç–∞"""
    kb = []
    for cab in cabinets:
        has_access = permissions.get(cab['id'], False)
        mark = '‚úÖ' if has_access else '‚õîÔ∏è'
        kb.append([
            InlineKeyboardButton(
                text=f"{mark} {cab['name']}",
                callback_data=f"admin_toggle_cabinet_{client_id}_{cab['id']}"
            )
        ])
    kb.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_manage_clients")])
    return InlineKeyboardMarkup(inline_keyboard=kb) 