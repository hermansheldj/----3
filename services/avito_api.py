import aiohttp
import ssl
from typing import Optional, Dict, Any
from config import AVITO_API_BASE_URL, AVITO_BALANCE_ENDPOINT
from database.crud import get_token, save_token
from datetime import datetime

class AvitoAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –ê–≤–∏—Ç–æ"""
    
    def __init__(self):
        self.base_url = AVITO_API_BASE_URL
        # –°–æ–∑–¥–∞–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        self.ssl_context = ssl.create_default_context()
        self.ssl_context.check_hostname = False
        self.ssl_context.verify_mode = ssl.CERT_NONE
    
    async def get_access_token(self, client_id: str, client_secret: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç access_token —á–µ—Ä–µ–∑ OAuth2 (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ)"""
        # 1. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–∑—è—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ –±–∞–∑—ã
        token = await get_token(client_id, client_secret)
        if token and token.expires_at > datetime.utcnow():
            print(f"üîë –ò—Å–ø–æ–ª—å–∑—É—é –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π access_token –¥–ª—è client_id: {client_id[:10]}...")
            return token.access_token

        # 2. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É Avito –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
        try:
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            client_id = client_id.strip()
            client_secret = client_secret.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ
            if not client_id or not client_secret:
                print(f"‚ùå –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ: client_id='{client_id}', client_secret='{client_secret}'")
                return None
            
            token_url = "https://api.avito.ru/token/"
            
            # –¢–æ—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ
            payload = {
                "grant_type": "client_credentials",
                "client_id": client_id,
                "client_secret": client_secret
            }
            
            print(f"üîë –ó–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è client_id: {client_id[:10]}...")
            print(f"üîë Payload: {payload}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            connector = aiohttp.TCPConnector(ssl=self.ssl_context)
            async with aiohttp.ClientSession(connector=connector) as session:
                # POST –∑–∞–ø—Ä–æ—Å –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ
                async with session.post(token_url, data=payload) as response:
                    response_text = await response.text()
                    print(f"üîë –°—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞: {response.status}")
                    print(f"üîë –û—Ç–≤–µ—Ç —Ç–æ–∫–µ–Ω–∞: {response_text}")
                    
                    if response.status == 200:
                        try:
                            data = await response.json()
                            access_token = data.get("access_token")
                            expires_in = data.get("expires_in", 3600)
                            if access_token:
                                print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {access_token[:20]}...")
                                await save_token(client_id, client_secret, access_token, expires_in)
                                return access_token
                            else:
                                print(f"‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ: {data}")
                                return None
                        except Exception as json_error:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {json_error}")
                            print(f"‚ùå –û—Ç–≤–µ—Ç: {response_text}")
                            return None
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status} - {response_text}")
                        return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            return None
    
    async def get_balance(self, client_id: str, client_secret: str, advertiser_id: str) -> Optional[Dict[str, float]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –∫–∞–±–∏–Ω–µ—Ç–∞ —á–µ—Ä–µ–∑ API –ê–≤–∏—Ç–æ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ)"""
        try:
            print(f"üí∞ –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è advertiser_id: {advertiser_id}")
            print(f"üí∞ Client ID: '{client_id}'")
            print(f"üí∞ Client Secret: '{client_secret[:10]}...' (–¥–ª–∏–Ω–∞: {len(client_secret)})")
            
            # 1. –ü–æ–ª—É—á–∞–µ–º access_token
            access_token = await self.get_access_token(client_id, client_secret)
            if not access_token:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access_token")
                return None
            
            # 2. –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ)
            balance_url = f"https://api.avito.ru/core/v1/accounts/{advertiser_id}/balance/"
            headers = {
                "Authorization": f"Bearer {access_token}",
                "Content-Type": "application/json"
            }
            
            print(f"üí∞ –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞: {balance_url}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            connector = aiohttp.TCPConnector(ssl=self.ssl_context)
            async with aiohttp.ClientSession(connector=connector) as session:
                async with session.get(balance_url, headers=headers) as response:
                    response_text = await response.text()
                    print(f"üí∞ –°—Ç–∞—Ç—É—Å –±–∞–ª–∞–Ω—Å–∞: {response.status}")
                    print(f"üí∞ –û—Ç–≤–µ—Ç –±–∞–ª–∞–Ω—Å–∞: {response_text}")
                    
                    if response.status == 200:
                        try:
                            balance_data = await response.json()
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–ª–∞–Ω—Å–µ (–∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ)
                            if "real" in balance_data:
                                real_balance = balance_data["real"]
                                bonus_balance = balance_data.get("bonus", 0)
                                
                                print(f"‚úÖ –ë–∞–ª–∞–Ω—Å (—Ä–µ–∞–ª—å–Ω—ã–π): {real_balance} RUB")
                                if bonus_balance > 0:
                                    print(f"‚úÖ –ë–∞–ª–∞–Ω—Å (–±–æ–Ω—É—Å–Ω—ã–π): {bonus_balance} RUB")
                                
                                result = {
                                    "real": real_balance,  # –û—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å
                                    "bonus": bonus_balance,  # –ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å
                                    "cpa": None  # CPA –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ
                                }
                                
                                # 3. –ü–æ–ª—É—á–∞–µ–º CPA –±–∞–ª–∞–Ω—Å (–∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ)
                                cpa_balance = await self.get_cpa_balance(access_token)
                                if cpa_balance is not None:
                                    result["cpa"] = cpa_balance
                                    print(f"‚úÖ CPA –ë–∞–ª–∞–Ω—Å: {cpa_balance} RUB")
                                else:
                                    print("‚ÑπÔ∏è CPA –±–∞–ª–∞–Ω—Å: –î—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ")
                                
                                return result
                            else:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {balance_data}")
                                return None
                        except Exception as json_error:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –±–∞–ª–∞–Ω—Å–∞: {json_error}")
                            print(f"‚ùå –û—Ç–≤–µ—Ç: {response_text}")
                            return None
                    else:
                        print(f"‚ùå API Error: {response.status} - {response_text}")
                        return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
            return None
    
    async def get_cpa_balance(self, access_token: str) -> Optional[float]:
        """–ü–æ–ª—É—á–∞–µ—Ç CPA –±–∞–ª–∞–Ω—Å (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ)"""
        try:
            cpa_balance_url = "https://api.avito.ru/cpa/v3/balanceInfo"
            headers = {
                "Authorization": f"Bearer {access_token}",
                "X-Source": "your_service_name",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
                "Content-Type": "application/json"
            }
            
            print(f"üìä –ó–∞–ø—Ä–æ—Å CPA –±–∞–ª–∞–Ω—Å–∞: {cpa_balance_url}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            connector = aiohttp.TCPConnector(ssl=self.ssl_context)
            async with aiohttp.ClientSession(connector=connector) as session:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º POST —Å –ø—É—Å—Ç—ã–º —Ç–µ–ª–æ–º, –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ
                async with session.post(cpa_balance_url, headers=headers, json={}) as response:
                    response_text = await response.text()
                    print(f"üìä –°—Ç–∞—Ç—É—Å CPA: {response.status}")
                    print(f"üìä –û—Ç–≤–µ—Ç CPA: {response_text}")
                    
                    if response.status == 200:
                        try:
                            cpa_data = await response.json()
                            if "balance" in cpa_data:
                                # –î–µ–ª–∏–º –Ω–∞ 100 –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –Ω–∞ –¥–≤–∞ –∑–Ω–∞–∫–∞, –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ
                                cpa_balance = cpa_data["balance"] / 100
                                print(f"‚úÖ CPA –±–∞–ª–∞–Ω—Å: {cpa_balance} RUB")
                                return cpa_balance
                            else:
                                print("‚ÑπÔ∏è CPA –±–∞–ª–∞–Ω—Å: –î—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ")
                                return None
                        except Exception as json_error:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON CPA: {json_error}")
                            print(f"‚ùå –û—Ç–≤–µ—Ç: {response_text}")
                            return None
                    else:
                        print(f"‚ùå CPA API Error: {response.status} - {response_text}")
                        return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ CPA –±–∞–ª–∞–Ω—Å–∞: {e}")
            return None
    
    async def get_cabinet_info(self, client_id: str, client_secret: str, advertiser_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–±–∏–Ω–µ—Ç–µ"""
        try:
            access_token = await self.get_access_token(client_id, client_secret)
            if not access_token:
                return None
            
            url = f"{self.base_url}/accounts/{advertiser_id}"
            headers = {
                "Authorization": f"Bearer {access_token}",
                "Content-Type": "application/json"
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            connector = aiohttp.TCPConnector(ssl=self.ssl_context)
            async with aiohttp.ClientSession(connector=connector) as session:
                async with session.get(url, headers=headers) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        print(f"API Error: {response.status} - {await response.text()}")
                        return None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–±–∏–Ω–µ—Ç–µ: {e}")
            return None
    
    async def get_all_cabinets_balance(self, cabinets: list) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤"""
        balance_data = []
        
        for cabinet in cabinets:
            print(f"\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–±–∏–Ω–µ—Ç–∞: {cabinet.name}")
            balance = await self.get_balance(
                cabinet.client_id,
                cabinet.client_secret, 
                cabinet.advertiser_id
            )
            
            if balance:
                status = "‚úÖ"
                balance_info = f"–û—Å–Ω–æ–≤–Ω–æ–π: {balance['real']:,.2f} ‚ÇΩ"
                if balance.get("bonus", 0) > 0:
                    balance_info += f"\n–ë–æ–Ω—É—Å–Ω—ã–π: {balance['bonus']:,.2f} ‚ÇΩ"
                if balance.get("cpa") is not None:
                    balance_info += f"\nCPA: {balance['cpa']:,.2f} ‚ÇΩ"
            else:
                status = "‚ùå"
                balance_info = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è"
            
            balance_data.append({
                "name": cabinet.name,
                "balance": balance,
                "balance_info": balance_info,
                "status": status,
                "client_id": cabinet.client_id,
                "advertiser_id": cabinet.advertiser_id
            })
        
        return balance_data

    async def get_cabinet_balance(self, cabinet) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
        try:
            print(f"\nüîç –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–∞–±–∏–Ω–µ—Ç–∞: {cabinet.name}")
            balance = await self.get_balance(
                cabinet.client_id,
                cabinet.client_secret, 
                cabinet.advertiser_id
            )
            
            if balance:
                balance_info = f"–û—Å–Ω–æ–≤–Ω–æ–π: {balance['real']:,.2f} ‚ÇΩ"
                if balance.get("bonus", 0) > 0:
                    balance_info += f"\n–ë–æ–Ω—É—Å–Ω—ã–π: {balance['bonus']:,.2f} ‚ÇΩ"
                if balance.get("cpa") is not None:
                    balance_info += f"\nCPA: {balance['cpa']:,.2f} ‚ÇΩ"
                
                return {
                    "balance": balance,
                    "balance_info": balance_info,
                    "error": None
                }
            else:
                return {
                    "balance": None,
                    "balance_info": None,
                    "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å"
                }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –∫–∞–±–∏–Ω–µ—Ç–∞ {cabinet.name}: {e}")
            return {
                "balance": None,
                "balance_info": None,
                "error": str(e)
            }

    async def get_aggregated_stats(self, cabinets: list) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –∫–∞–±–∏–Ω–µ—Ç–∞–º –≤ –≤–∏–¥–µ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–±–µ–∑ HTML/Markdown).
        """
        if not cabinets:
            return "–£ –≤–∞—Å –Ω–µ—Ç –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."

        balance_data = await self.get_all_cabinets_balance(cabinets)

        stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫–∞–±–∏–Ω–µ—Ç–æ–≤:\n"
        total_real_balance = 0
        total_bonus_balance = 0
        total_cpa_balance = 0
        successful_requests = 0

        for cab_data in balance_data:
            name = cab_data["name"]
            balance = cab_data["balance"]
            if balance is not None:
                total_real_balance += balance.get("real", 0)
                total_bonus_balance += balance.get("bonus", 0)
                if balance.get("cpa") is not None:
                    total_cpa_balance += balance["cpa"]
                successful_requests += 1
                stats_text += f"\n‚úÖ {name}\n"
                if balance.get("real", 0) > 0:
                    stats_text += f"–û—Å–Ω–æ–≤–Ω–æ–π: {balance['real']:,.2f} ‚ÇΩ\n"
                if balance.get("bonus", 0) > 0:
                    stats_text += f"–ë–æ–Ω—É—Å–Ω—ã–π: {balance['bonus']:,.2f} ‚ÇΩ\n"
                if balance.get("cpa") is not None:
                    stats_text += f"CPA: {balance['cpa']:,.2f} ‚ÇΩ\n"
            else:
                stats_text += f"\n‚ùå {name}: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è\n"

        stats_text += "\nüí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å:\n"
        stats_text += f"‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π: {total_real_balance:,.2f} ‚ÇΩ\n"
        if total_bonus_balance > 0:
            stats_text += f"‚Ä¢ –ë–æ–Ω—É—Å–Ω—ã–π: {total_bonus_balance:,.2f} ‚ÇΩ\n"
        if total_cpa_balance > 0:
            stats_text += f"‚Ä¢ CPA: {total_cpa_balance:,.2f} ‚ÇΩ\n"
        total_all = total_real_balance + total_bonus_balance + total_cpa_balance
        stats_text += f"‚Ä¢ –ò—Ç–æ–≥–æ: {total_all:,.2f} ‚ÇΩ\n"

        stats_text += f"\nüìà –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ: {successful_requests}/{len(cabinets)}"

        from datetime import datetime
        current_time = datetime.now().strftime("%H:%M:%S")
        stats_text += f"\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}"

        return stats_text

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API
avito_api = AvitoAPI() 